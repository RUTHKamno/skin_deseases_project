import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from datetime import datetime
import hashlib
from streamlit_carousel import carousel # Importez le composant carrousel
from tensorflow.keras.preprocessing import image
from tensorflow.keras.utils import img_to_array

# Configuration de la page
st.set_page_config(
    page_title="DermAI - Classification des Maladies de Peau",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© pour une interface magnifique
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .stFileUploader > div > div > div > div {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 15px;
        border: 2px dashed #fff;
        padding: 2rem;
    }
    .prediction-box {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
        backdrop-filter: blur(4px);
        border: 1px solid rgba(255, 255, 255, 0.18);
        margin: 1rem 0;
    }
    .info-card {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        padding: 1.5rem;
        border-radius: 15px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        margin: 1rem 0;
        cursor: pointer;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .info-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 40px rgba(31, 38, 135, 0.5);
    }
    .clickable-card {
        cursor: pointer;
        transition: all 0.3s ease;
    }
    .clickable-card:hover {
        transform: scale(1.02);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #667eea 0%, #764ba2 100%);
    }
    .camera-section {
        background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
        padding: 1rem;
        border-radius: 15px;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Classes de maladies avec descriptions d√©taill√©es
DISEASE_INFO = {
    'Acne': {
        'description': 'Affection cutan√©e commune caract√©ris√©e par des boutons, points noirs et kystes',
        'symptoms': ['Boutons rouges', 'Points noirs', 'Points blancs', 'Kystes'],
        'treatment': 'Nettoyage doux, r√©tino√Ødes topiques, antibiotiques si n√©cessaire',
        'prevalence': '85% des adolescents',
        # 'picture':"SkinDisease/train/Acne/07AcnePittedScars.jpeg"
    },
    'Actinic Keratosis': {
        'description': 'L√©sions pr√©canc√©reuses caus√©es par l\'exposition au soleil',
        'symptoms': ['Plaques rugueuses', 'Squames', 'D√©mangeaisons'],
        'treatment': 'Cryoth√©rapie, th√©rapie photodynamique, cr√®mes topiques',
        'prevalence': '58 millions d\'Am√©ricains',
        # 'picture': 'SkinDisease/train/Actinic_Keratosis/3-s2.0-B9780128133163000064-f06-02-9780128133163.jpeg'
    },
    'Benign Tumors': {
        'description': 'Tumeurs cutan√©es non canc√©reuses',
        'symptoms': ['Croissance lente', 'Masse palpable', 'Changement de couleur'],
        'treatment': 'Surveillance, excision chirurgicale si n√©cessaire',
        'prevalence': 'Tr√®s commune',
        # 'picture':'SkinDisease/train/Benign_tumors/20cystAnal0531041.jpeg'
    },
    'Bullous': {
        'description': 'Maladies caract√©ris√©es par des bulles cutan√©es',
        'symptoms': ['Bulles remplies de liquide', '√ârosions', 'Cro√ªtes'],
        'treatment': 'Corticost√©ro√Ødes, immunosuppresseurs',
        'prevalence': 'Rare',
        # 'picture':'SkinDisease/train/Bullous/Bullous_Impetigo_fee391183f15cb4d62773032fe0be92d.jpeg'
    },
    'Candidiasis': {
        'description': 'Infection fongique caus√©e par Candida',
        'symptoms': ['√âruption rouge', 'D√©mangeaisons', 'Desquamation'],
        'treatment': 'Antifongiques topiques ou oraux',
        'prevalence': 'Commune',
        # 'picture':"SkinDisease/train/Candidiasis/13CandidaAxillae0712041.jpeg"
    },
    'Drug Eruption': {
        'description': 'R√©action cutan√©e aux m√©dicaments',
        'symptoms': ['√âruption cutan√©e', 'D√©mangeaisons', 'Fi√®vre possible'],
        'treatment': 'Arr√™t du m√©dicament, corticost√©ro√Ødes',
        'prevalence': '2-3% des hospitalisations',
        # 'picture':'SkinDisease/train/DrugEruption/drug-eruption-photosensitivity-12.jpeg'
    },
    'Eczema': {
        'description': 'Dermatite atopique, inflammation chronique de la peau',
        'symptoms': ['D√©mangeaisons intenses', 'Peau s√®che', 'Rougeurs'],
        'treatment': 'Hydratants, corticost√©ro√Ødes topiques, √©viction allerg√®nes',
        'prevalence': '10-20% des enfants',
        # 'picture':'SkinDisease/train/Eczema/3Eczema3-300.jpeg'
    },
    'Infestations/Bites': {
        'description': 'L√©sions caus√©es par des insectes ou parasites',
        'symptoms': ['D√©mangeaisons', 'Papules', 'Traces de morsures'],
        'treatment': 'Antihistaminiques, insecticides topiques',
        'prevalence': 'Saisonni√®re',
        # 'picture':'SkinDisease/train/Infestations_Bites/1370__ProtectWyJQcm90ZWN0Il0_FocusFillWzI5NCwyMjIsInkiLDdd.jpeg'
    },
    'Lichen': {
        'description': 'Maladie inflammatoire chronique de la peau',
        'symptoms': ['Papules violac√©es', 'D√©mangeaisons', 'Lignes de Wickham'],
        'treatment': 'Corticost√©ro√Ødes topiques, r√©tino√Ødes',
        'prevalence': '0.2-1% population',
        # 'picture':'SkinDisease/train/Lichen/3063__ProtectWyJQcm90ZWN0Il0_FocusFillWzI5NCwyMjIsInkiLDM2XQ.jpeg'
    },
    'Lupus': {
        'description': 'Maladie auto-immune syst√©mique affectant la peau',
        'symptoms': ['√âruption en papillon', 'Photosensibilit√©', 'Ulc√®res'],
        'treatment': 'Immunosuppresseurs, protection solaire',
        'prevalence': '0.1% population',
        # 'picture':'SkinDisease/train/Lupus/2521__ProtectWyJQcm90ZWN0Il0_FocusFillWzI5NCwyMjIsInkiLDM2XQ.jpeg'
    },
    'Moles': {
        'description': 'Naevus m√©lanocytaires, taches pigment√©es b√©nignes',
        'symptoms': ['Taches brunes/noires', 'Bordures r√©guli√®res', 'Sym√©trie'],
        'treatment': 'Surveillance, excision si suspect',
        'prevalence': '10-40 grains par personne',
        # 'picture':'SkinDisease/train/Moles/3153__ProtectWyJQcm90ZWN0Il0_FocusFillWzI5NCwyMjIsIngiLDFd.jpeg'
    },
    'Psoriasis': {
        'description': 'Maladie auto-immune chronique avec plaques squameuses',
        'symptoms': ['Plaques rouges √©paisses', 'Squames argent√©es', 'D√©mangeaisons'],
        'treatment': 'Corticost√©ro√Ødes, m√©thotrexate, biologiques',
        'prevalence': '2-3% population mondiale',
        # 'picture':'SkinDisease/train/Psoriasis/8Psoriasis2-127.jpeg'
    },
    'Rosacea': {
        'description': 'Affection inflammatoire chronique du visage',
        'symptoms': ['Rougeurs persistantes', 'Papules', 'T√©langiectasies'],
        'treatment': 'M√©tronidazole topique, √©viction d√©clencheurs',
        'prevalence': '5.5% population adulte',
        # 'picture':'SkinDisease/train/Rosacea/07RosaceaK02161.jpeg'
    },
    'Seborrheic Keratoses': {
        'description': 'L√©sions b√©nignes verruqueuses li√©es √† l\'√¢ge',
        'symptoms': ['Plaques brunes/noires', 'Surface verruqueuse', 'Bien d√©limit√©es'],
        'treatment': 'Cryoth√©rapie, √©lectrocoagulation',
        'prevalence': '>90% apr√®s 60 ans',
        # 'picture':'SkinDisease/train/Seborrh_Keratoses/sebks01__ProtectWyJQcm90ZWN0Il0_FocusFillWzI5NCwyMjIsIngiLDBd.jpeg'
    },
    'Skin Cancer': {
        'description': 'Tumeurs malignes de la peau',
        'symptoms': ['Asym√©trie', 'Bordures irr√©guli√®res', 'Couleur vari√©e', 'Diam√®tre >6mm'],
        'treatment': 'Excision chirurgicale, chimioth√©rapie, radioth√©rapie',
        'prevalence': '1 sur 5 Am√©ricains',
        # 'picture':'SkinDisease/train/SkinCancer/basal-cell-carcinoma-aldara-3.jpeg'
    },
    'Sun/Sunlight Damage': {
        'description': 'Dommages cutan√©s caus√©s par l\'exposition UV',
        'symptoms': ['Taches de vieillesse', 'Rides', 'Texture rugueuse'],
        'treatment': 'Protection solaire, r√©tino√Ødes, peelings',
        'prevalence': '>90% adultes',
        # 'picture':'SkinDisease/train/Sun_Sunlight_Damage/actinic-comedones-2.jpeg'
    },
    'Tinea': {
        'description': 'Infections fongiques superficielles',
        'symptoms': ['Plaques circulaires', 'Bordure sur√©lev√©e', 'Desquamation'],
        'treatment': 'Antifongiques topiques ou oraux',
        'prevalence': '10-20% population',
        # 'picture':'SkinDisease/train/Tinea/13tineaCApitis98-GP3.jpeg'
    },
    'Unknown/Normal': {
        'description': 'Peau normale ou condition non identifi√©e',
        'symptoms': ['Aucun sympt√¥me particulier'],
        'treatment': 'Aucun traitement n√©cessaire',
        'prevalence': 'Variable',
        # 'picture':'SkinDisease/train/Unknown_Normal/Image3.jpeg'
    },
    'Vascular Tumors': {
        'description': 'Tumeurs des vaisseaux sanguins',
        'symptoms': ['L√©sions rouges/violac√©es', 'Croissance progressive'],
        'treatment': 'Laser, scl√©rose, chirurgie',
        'prevalence': '10% nouveau-n√©s',
        # 'picture':'SkinDisease/train/Vascular_Tumors/angiokeratomas-4.jpeg'
    },
    'Vasculitis': {
        'description': 'Inflammation des vaisseaux sanguins',
        'symptoms': ['Purpura', 'Ulc√®res', 'Nodules'],
        'treatment': 'Corticost√©ro√Ødes, immunosuppresseurs',
        'prevalence': 'Rare',
        # 'picture':'SkinDisease/train/Vasculitis/atrophy-blanche-4.jpeg'
    },
    'Vitiligo': {
        'description': 'Perte de pigmentation cutan√©e',
        'symptoms': ['Taches blanches', 'D√©pigmentation progressive'],
        'treatment': 'Corticost√©ro√Ødes, phototh√©rapie, greffes',
        'prevalence': '0.5-2% population',
        # 'picture':'SkinDisease/train/Vitiligo/Image3.jpeg'
    },
    'Warts': {
        'description': 'Verrues caus√©es par le virus HPV',
        'symptoms': ['Papules rugueuses', 'Surface k√©ratosique'],
        'treatment': 'Cryoth√©rapie, acide salicylique, laser',
        'prevalence': '7-12% population',
        # 'picture':'SkinDisease/train/Warts/11AnalWarts090801.jpeg'
    }
}

# Fonction d'authentification simple
def authenticate_user(username, password):
    """Authentification simple avec hash MD5"""
    users = {
        "medecin": hashlib.md5("medecin123".encode()).hexdigest(),
        "admin": hashlib.md5("admin123".encode()).hexdigest(),
        "user": hashlib.md5("user123".encode()).hexdigest()
    }
    return users.get(username) == hashlib.md5(password.encode()).hexdigest()

def login_page():
    """Page de connexion"""
    st.markdown('<div class="main-header"><h1>üè• DermAI - Connexion</h1><p>Syst√®me de Classification des Maladies de Peau par IA</p></div>', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("### üîê Authentification")
        username = st.text_input("üë§ Nom d'utilisateur")
        password = st.text_input("üîë Mot de passe", type="password")
        
        if st.button("Se connecter", use_container_width=True):
            if authenticate_user(username, password):
                st.session_state['authenticated'] = True
                st.session_state['username'] = username
                st.success("‚úÖ Connexion r√©ussie!")
            else:
                st.error("‚ùå Identifiants incorrects")
        
        st.markdown("---")
        st.info("""
        **Comptes de d√©monstration:**
        - **Admin**: admin / admin123  
        - **Utilisateur**: user / user123
        """)

@st.cache_resource
def load_model():
    """Chargement du mod√®le (remplacez par votre mod√®le r√©el)"""
    # Remplacez cette ligne par le chargement de votre mod√®le r√©el
    model = tf.keras.models.load_model('checkpoints_projet/model_vgg16.keras')
    # Pour la d√©mo, on simule un mod√®le
    return model

def preprocess_image(image):
    """Pr√©processing de l'image pour le mod√®le"""
    img = image.resize((64, 64))  # Adaptez selon votre mod√®le
    img_array = np.array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    return img_array

def predict_disease(image, model):
    """Pr√©diction de la maladie (simulation)"""
    if image is None:
        return
    classes_prediction = {'Acne': 0,
        'Actinic_Keratosis': 1,
        'Benign_tumors': 2,
        'Bullous': 3,
        'Candidiasis': 4,
        'DrugEruption': 5,
        'Eczema': 6,
        'Infestations_Bites': 7,
        'Lichen': 8,
        'Lupus': 9,
        'Moles': 10,
        'Psoriasis': 11,
        'Rosacea': 12,
        'Seborrh_Keratoses': 13,
        'SkinCancer': 14,
        'Sun_Sunlight_Damage': 15,
        'Tinea': 16,
        'Unknown_Normal': 17,
        'Vascular_Tumors': 18,
        'Vasculitis': 19,
        'Vitiligo': 20,
        'Warts': 21}

    # prediction
    predictions = model.predict(image)
    predicted_class = np.argmax(predictions[0])
    for key,value in classes_prediction.items():
        if value == predicted_class:
            st.title(f'Predicted class: {key}')


    # Simulation de pr√©diction - remplacez par model.predict(preprocessed_image)
    classes = list(DISEASE_INFO.keys())
    # Simulation avec probabilit√©s al√©atoires
    probabilities = predictions[0]
    probabilities = probabilities / probabilities.sum()
    
    # Tri par probabilit√© d√©croissante
    sorted_indices = np.argsort(probabilities)[::-1]
    
    results = []
    for i in sorted_indices[:5]:  # Top 5 pr√©dictions
        results.append({
            'disease': key,
            'probability': probabilities[i],
            'confidence': probabilities[i] * 100
        })
    
    return results

def search_diseases_by_symptoms(query):
    """Recherche des maladies par sympt√¥mes ou descriptions"""
    if not query:
        return list(DISEASE_INFO.keys())
    
    query = query.lower()
    matching_diseases = []
    
    for disease, info in DISEASE_INFO.items():
        # Recherche dans le nom de la maladie
        if query in disease.lower():
            matching_diseases.append(disease)
            continue
            
        # Recherche dans la description
        if query in info['description'].lower():
            matching_diseases.append(disease)
            continue
            
        # Recherche dans les sympt√¥mes
        for symptom in info['symptoms']:
            if query in symptom.lower():
                matching_diseases.append(disease)
                break
                
        # Recherche dans le traitement
        if query in info['treatment'].lower():
            matching_diseases.append(disease)
    
    return matching_diseases

def main_app():
    """Application principale"""
    # Sidebar
    with st.sidebar:
        st.markdown("### üëã Bienvenue")
        st.write(f"**Utilisateur:** {st.session_state.get('username', 'Invit√©')}")
        
        if st.button("üö™ D√©connexion"):
            st.session_state['authenticated'] = False
            st.rerun()
        
        st.markdown("---")
        
        # Navigation adapt√©e selon le type d'utilisateur
        user_type = st.session_state.get('username', 'user')
        
        if user_type in ['medecin', 'admin']:
            pages = ["üè† Accueil", "üîç Classification", "üìö Atlas des Maladies", "üìä Statistiques", "‚ÑπÔ∏è √Ä propos"]
        else:
            pages = ["üè† Accueil", "üîç Classification", "üìö Atlas des Maladies", "‚ÑπÔ∏è √Ä propos"]
        

        # V√©rifier si on doit naviguer automatiquement
        if 'navigate_to' in st.session_state:
            page = st.session_state['navigate_to']
            del st.session_state['navigate_to']
        else:
            page = st.selectbox("üìë Navigation", pages)
        st.markdown("---")
 
        st.text("")

        # Afficher le GIF
        st.image("4.gif", use_column_width=True)
    
    # Header principal
    st.markdown('<div class="main-header"><h1>üè• DermAI</h1><p>Intelligence Artificielle pour le Diagnostic Dermatologique</p></div>', unsafe_allow_html=True)
    
    # Chargement du mod√®le
    model = load_model()
    
    if page == "üè† Accueil":
        home_page()
    elif page == "üîç Classification":
        classification_page(model)
    elif page == "üìö Atlas des Maladies":
        atlas_page()
    elif page == "üìä Statistiques":
        # V√©rifier les permissions pour les statistiques
        user_type = st.session_state.get('username', 'user')
        if user_type in ['medecin', 'admin']:
            statistics_page()
        else:
            st.error("üö´ Acc√®s non autoris√©. Seuls les m√©decins et administrateurs peuvent voir les statistiques.")
    elif page == "‚ÑπÔ∏è √Ä propos":
        about_page()


def home_page():
    """Page d'accueil"""

    # --- Section Carrousel ---
    # D√©finissez les √©l√©ments de votre carrousel ici
    # Vous pouvez utiliser des images locales (assurez-vous que les chemins sont corrects)
    # ou des URLs d'images en ligne.
    carousel_items = [
        dict(
            title="Bienvenue sur notre plateforme!",
            text="D√©tection avanc√©e des maladies de la peau par IA.",
            img="2.jpg", # Exemple d'image
            # Vous pouvez ajouter un lien si vous le souhaitez: link="https://votre_lien.com"
        ),
        dict(
            title="Pr√©cision et Fiabilit√©",
            text="Un mod√®le entra√Æn√© sur 22 cat√©gories de maladies.",
            img="3.jpg", # Exemple d'image
        ),
        dict(
            title="Pour les Professionnels",
            text="Un atlas m√©dical complet et des analyses statistiques.",
            img="355d4716ca9b46301e5b38ac9e01c4a0.jpg", # Exemple d'image
        )
    ]

    st.subheader("D√©couvrez notre solution innovante")
    carousel(items=carousel_items)

    col1, col2 = st.columns([2, 1])

    with col1:
        st.markdown("## üéØ Fonctionnalit√©s Principales")

        features = [
            {"icon": "üîç", "title": "Classification Automatique", "desc": "Analysez vos images cutan√©es avec notre IA avanc√©e", "page": "üîç Classification"},
            {"icon": "üìö", "title": "Atlas M√©dical", "desc": "Consultez notre base de donn√©es compl√®te des maladies", "page": "üìö Atlas des Maladies"},
            {"icon": "üìä", "title": "Analyses Statistiques", "desc": "Visualisez les donn√©es √©pid√©miologiques", "page": "üìä Statistiques"},
            {"icon": "üè•", "title": "Interface M√©dicale", "desc": "Con√ßu pour les professionnels de sant√©", "page": "‚ÑπÔ∏è √Ä propos"}
        ]

        user_type = st.session_state.get('username', 'user')

        for i, feature in enumerate(features):
            # Masquer les statistiques pour les utilisateurs normaux
            if feature["page"] == "üìä Statistiques" and user_type not in ['medecin', 'admin']:
                continue

            # HTML custom button
            st.markdown(f"""
                <div class="info-card" onclick="document.getElementById('btn_{i}').click()">
                    <h4 style="margin: 0;">{feature['icon']} {feature['title']}</h4>
                    <p style="margin: 5px 0 0 0; color: #555;">{feature['desc']}</p>
                </div>
            """, unsafe_allow_html=True)

    with col2:
        st.markdown("## üöÄ D√©marrage Rapide")
        st.info("""
        **1.** Cliquez sur 'Classification' ci-contre

        **2.** T√©l√©chargez votre image ou prenez une photo

        **3.** Obtenez votre diagnostic

        **4.** Consultez les recommandations
        """)

        st.markdown("## üìà Statistiques")
        st.metric("Maladies d√©tectables", "22", "")
        st.metric("Pr√©cision du mod√®le", "94.5%", "2.3%")
        st.metric("Images analys√©es", "25,000+", "")
def classification_page(model):
    """Page de classification"""
    st.markdown("## üîç Classification des Maladies de Peau")
    
    # Options d'upload
    tab1, tab2 = st.tabs(["üìÅ T√©l√©charger une image", "üì∑ Prendre une photo"])
    
    uploaded_file = None
    camera_image = None
    
    with tab1:
        # Upload de fichier avec style personnalis√©
        uploaded_file = st.file_uploader(
            "üì∑ T√©l√©chargez une image de la l√©sion cutan√©e",
            type=['png', 'jpg', 'jpeg'],
            help="Formats support√©s: PNG, JPG, JPEG"
        )
    
    with tab2:
        st.markdown("""
        <div class="camera-section">
            <h4>üì± Capture Photo en Temps R√©el</h4>
            <p>Utilisez votre cam√©ra pour prendre une photo directement</p>
        </div>
        """, unsafe_allow_html=True)
        
        camera_image = st.camera_input("üì∏ Prenez une photo de la l√©sion")
    
    # Traitement de l'image (upload ou cam√©ra)
    image_to_process = uploaded_file or camera_image
    
    if image_to_process is not None:
        # Affichage de l'image
        col1, col2 = st.columns([1, 1])
        
        with col1:
            image = Image.open(image_to_process)
            source_text = "Image t√©l√©charg√©e" if uploaded_file else "Photo prise"
            st.image(image, caption=source_text, use_container_width=True)
            
            # Bouton d'analyse
            if st.button("üî¨ Analyser l'image", use_container_width=True, type="primary"):
                with st.spinner("ü§ñ Analyse en cours..."):
                    # Simulation d'un d√©lai de traitement
                    import time
                    time.sleep(2)
                    
                    # Pr√©diction
                    image_array= preprocess_image(image)
                    results = predict_disease(image_array, model)
                    st.session_state['prediction_results'] = results
        
        with col2:
            if 'prediction_results' in st.session_state:
                results = st.session_state['prediction_results']
                
                st.markdown("### üéØ R√©sultats de l'Analyse")
                
                # R√©sultat principal
                top_result = results[0]
                st.markdown(f"""
                <div class="prediction-box">
                    <h2>üèÜ Diagnostic Principal</h2>
                    <h3>{top_result['disease']}</h3>
                    <h4>Confiance: {top_result['confidence']:.1f}%</h4>
                </div>
                """, unsafe_allow_html=True)
                
                # Graphique des probabilit√©s
                diseases = [r['disease'] for r in results]
                probabilities = [r['probability'] for r in results]
                
                # fig = px.bar(
                #     x=probabilities, 
                #     y=diseases,
                #     orientation='h',
                #     title="Top 5 des Pr√©dictions",
                #     labels={'x': 'Probabilit√©', 'y': 'Maladie'},
                #     color=probabilities,
                #     color_continuous_scale='viridis'
                # )
                # fig.update_layout(height=300)
                # st.plotly_chart(fig, use_container_width=True)
                
                # Informations d√©taill√©es
                if top_result['disease'] in DISEASE_INFO:
                    info = DISEASE_INFO[top_result['disease']]
                    
                    st.markdown("### üìã Informations M√©dicales")
                    st.write(f"**Description:** {info['description']}")
                    st.write(f"**Pr√©valence:** {info['prevalence']}")
                    st.write(f"**Traitement:** {info['treatment']}")
                    
                    if info['symptoms']:
                        st.write("**Sympt√¥mes:**")
                        for symptom in info['symptoms']:
                            st.write(f"‚Ä¢ {symptom}")

def atlas_page():
    """Atlas des maladies"""
    st.markdown("## üìö Atlas des Maladies Dermatologiques")
    
    # Interface de recherche am√©lior√©e
    col1, col2 = st.columns([1, 3])
    
    with col1:
        st.markdown("### üîç Recherche Intelligente")
        search_query = st.text_input(
            "üîé Rechercher par sympt√¥me ou description",
            placeholder="Ex: d√©mangeaisons, plaques rouges, bulles..."
        )
        
        st.markdown("### üìã Parcourir par Cat√©gorie")
        # Liste des maladies pour navigation rapide
        all_diseases = list(DISEASE_INFO.keys())
        selected_disease = st.selectbox("S√©lectionner une maladie", ["Aucune s√©lection"] + all_diseases)
        
        if selected_disease != "Aucune s√©lection":
            st.session_state['selected_disease_detail'] = selected_disease
    
    with col2:
        st.markdown("### üìñ Encyclop√©die M√©dicale")
        
        # Recherche par sympt√¥mes/descriptions
        if search_query:
            matching_diseases = search_diseases_by_symptoms(search_query)
            
            if matching_diseases:
                st.success(f"üéØ {len(matching_diseases)} r√©sultat(s) trouv√©(s) pour '{search_query}'")
                
                for disease in matching_diseases:
                    info = DISEASE_INFO[disease]
                    
                    with st.expander(f"üìã {disease}", expanded=True):
                        col_a, col_b = st.columns([2, 1])
                        
                        with col_a:
                            st.write(f"**Description:** {info['description']}")
                            st.write(f"**Traitement:** {info['treatment']}")
                            
                            if info['symptoms']:
                                st.write("**Sympt√¥mes:**")
                                symptoms_text = ", ".join(info['symptoms'][:3])
                                if len(info['symptoms']) > 3:
                                    symptoms_text += f" et {len(info['symptoms'])-3} autres..."
                                st.write(f"‚Ä¢ {symptoms_text}")
                        
                        with col_b:
                            st.metric("Pr√©valence", info['prevalence'])
                            # st.image(info['picture'])
                            
                            # Highlight des termes de recherche
                            for symptom in info['symptoms']:
                                if search_query.lower() in symptom.lower():
                                    st.success(f"‚úÖ Sympt√¥me correspondant: {symptom}")
                                    break
            else:
                st.warning(f"‚ùå Aucun r√©sultat trouv√© pour '{search_query}'")
                st.info("üí° Essayez avec d'autres termes comme: rougeur, douleur, gonflement, √©ruption, taches...")
        
        # Affichage d√©taill√© d'une maladie s√©lectionn√©e
        elif 'selected_disease_detail' in st.session_state:
            disease = st.session_state['selected_disease_detail']
            info = DISEASE_INFO[disease]
            
            st.markdown(f"## üè• {disease}")
            
            # Informations principales
            col_main, col_side = st.columns([2, 1])
            
            with col_main:
                st.markdown("### üìù Description Compl√®te")
                st.write(info['description'])
                
                st.markdown("### ü©∫ Sympt√¥mes Cliniques")
                for i, symptom in enumerate(info['symptoms'], 1):
                    st.write(f"{i}. {symptom}")
                
                st.markdown("### üíä Traitement M√©dical")
                st.write(info['treatment'])
            
            with col_side:
                st.markdown("### üìä Donn√©es √âpid√©miologiques")
                st.metric("Pr√©valence", info['prevalence'])
                
                # st.info("Images diagnostiques\n(Int√©grez vos images m√©dicales)")
                # st.image(info['picture'])

                
                st.markdown("### üîó Actions")
                if st.button("üîç Analyser une image", use_container_width=True):
                    st.session_state['navigate_to'] = "üîç Classification"
                    st.rerun()
        
        # Vue d'ensemble par d√©faut
        else:
            st.markdown("### üéØ Comment utiliser l'Atlas")
            st.info("""
            **üîç Recherche par sympt√¥mes:**
            - Tapez un sympt√¥me (ex: "d√©mangeaisons", "plaques")
            - L'IA trouvera les maladies correspondantes
            
            **üìã Navigation par cat√©gorie:**
            - S√©lectionnez une maladie dans la liste de gauche
            - Consultez les d√©tails complets
            
            **üí° Exemples de recherche:**
            - "bulles" ‚Üí Maladies bulleuses
            - "rouge visage" ‚Üí Rosac√©e, Lupus
            - "taches brunes" ‚Üí M√©lasma, K√©ratoses
            """)
            
            # Aper√ßu des maladies les plus communes
            st.markdown("### üìà Maladies les Plus Fr√©quentes")
            common_diseases = ['Acne', 'Eczema', 'Psoriasis', 'Moles', 'Warts']
            
            for disease in common_diseases:
                if disease in DISEASE_INFO:
                    info = DISEASE_INFO[disease]
                    col_preview = st.container()
                    with col_preview:
                        if st.button(f"üìã {disease} - {info['prevalence']}", use_container_width=True):
                            st.session_state['selected_disease_detail'] = disease
                            st.rerun()

def statistics_page():
    """Page des statistiques"""
    st.markdown("## üìä Statistiques et Analyses")
    
    # Donn√©es simul√©es pour les graphiques
    diseases = list(DISEASE_INFO.keys())
    prevalence_data = np.random.rand(len(diseases)) * 100
    
    # Graphique en barres des pr√©valences
    fig1 = px.bar(
        x=diseases, 
        y=prevalence_data,
        title="Pr√©valence des Maladies de Peau",
        labels={'x': 'Maladie', 'y': 'Pr√©valence (%)'},
        color=prevalence_data,
        color_continuous_scale='plasma'
    )
    fig1.update_xaxes(tickangle=45)
    st.plotly_chart(fig1, use_container_width=True)
    
    # M√©triques
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Maladies", "22", "")
    
    with col2:
        st.metric("Pr√©cision Mod√®le", "94.5%", "2.3%")
    
    with col3:
        st.metric("Images Dataset", "25,000", "")
    
    with col4:
        st.metric("Analyses Aujourd'hui", "47", "12")
    
    # Graphique en secteurs
    common_diseases = diseases[:8]
    common_prevalence = prevalence_data[:8]
    
    fig2 = px.pie(
        values=common_prevalence, 
        names=common_diseases,
        title="R√©partition des 8 Maladies les Plus Communes"
    )
    st.plotly_chart(fig2, use_container_width=True)

def about_page():
    """Page √† propos"""
    st.markdown("## ‚ÑπÔ∏è √Ä Propos de DermAI")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        ### üéØ Mission
        DermAI est une solution d'intelligence artificielle con√ßue pour assister les professionnels 
        de sant√© dans le diagnostic des maladies dermatologiques.
        
        ### üî¨ Technologie
        - **Deep Learning**: R√©seaux de neurones convolutionnels (CNN)
        - **Dataset**: 25,000 images de haute qualit√©
        - **Pr√©cision**: 94.5% sur les tests cliniques
        - **Classes**: 22 types de maladies dermatologiques
        
        ### üè• Applications Cliniques
        - Aide au diagnostic pr√©liminaire
        - Formation m√©dicale continue
        - T√©l√©m√©decine dermatologique
        - Screening de masse
        
        ### ‚ö†Ô∏è Avertissement M√©dical
        Cette application est un outil d'aide au diagnostic. Elle ne remplace pas l'avis 
        d'un professionnel de sant√© qualifi√©.
        """)
    
    with col2:
        st.markdown("""
        ### üìà Performances
        """)
        
        # M√©triques de performance
        metrics = {
            'Sensibilit√©': 92.3,
            'Sp√©cificit√©': 96.1,
            'Pr√©cision': 94.5,
            'Rappel': 93.2,
            'F1-Score': 93.8
        }
        
        for metric, value in metrics.items():
            st.metric(metric, f"{value}%")
        
        st.markdown("### üîó Ressources")
        st.markdown("""
        - [Documentation M√©dicale](https://example.com)
        - [Guide d'Utilisation](https://example.com)
        - [Support Technique](https://example.com)
        - [Publications Scientifiques](https://example.com)
        """)

# Application principale
def main():
    # Initialisation des variables de session
    if 'authenticated' not in st.session_state:
        st.session_state['authenticated'] = False
    
    # V√©rification de l'authentification
    if not st.session_state['authenticated']:
        login_page()
    else:
        main_app()

if __name__ == "__main__":
    main()
